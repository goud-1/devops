day-1
ansible setup
--------------
three servers

ansible set up

cd .ssh
ansible is used ssh configuration

so by using ssh configuration ansible master will communicate with slaves
ssh configuration steps:
step-1:
in master only master:
cd .ssh
ssh-keygen
press 'enter' button 4 times,then it will generate id_rsa and idrsa.pub files
cat id_rsa.pub
copy the content
step-2:
goto slave
cd .ssh
nano autherised_keys  
then remove the content up to ssh then add the content which is copied from master.
step-3:
------
hostname -i it will display private ip
then goto master give this like following

ssh private key of slave

ansible configuration:
----------------------
sudo amazon-linux-extras install ansible2 -y

vim /etc/ansible/hosts

here we have to enter the private ip addresses of slave machines
[dev]
private ip1
private ip2
[test]
private ip3
private ip4
ansible all -m ping--->this is used for to verify the ansible configuration

history:
yum update -y
    2  cd .ssh/
    3  ls
    4  ssh-keygen
    5  ls
    6  cat id_rsa.pub
    7  ssh 172.31.94.235
    8  ssh 172.31.82.35
    9  yum install ansible -y
   10  sudo amazon-linux-extras install ansible2 -y
   11  cd
   12  vim /etc/ansible/hosts
   13  ansible all -m ping
day:-2
------
ansible all -m ping
adhoc commands: 
these all are linux commands for using tempory perpose
ansible all -a "ls"
ansible all -a "lsblk"
ansible all -a "yum install httpd -y"
ansible all -a "service httpd start"
ansible all -a "service httpd status"
ansible all -a "yum install git -y"
ansible all -a "yum install tree -y"
ansible all -a "useradd ramu"
ansible all -a "cat /etc/ansible"
ansible all -a "touch abc.txt"
ansible all -a "mkdir devops"

modules:
these are key-value pairs,we can reuse modules

ansible all -m yum -a "name=httpd state=present"(install)
ansible all -m service -a "name=httpd state=started"(start)
ansible all -m service -a "name=httpd state=stopped"
ansible all -m yum -a "name=git state=present"
ansible all -m yum -a "name=maven state=latest"
ansible all -m yum -a "name=httpd state=absent"(uninstall)
ansible all -m copy -a "src=abc.txt dest=/root"
ansible all -m user -a "name=ramu state=present"

here we can use single module at a time
vim index,html
<!DOCTYPE html>   
<html>   
<head>  
<meta name="viewport" content="width=device-width, initial-scale=1">  
<title> Login Page </title>  
<style>   
Body {  
  font-family: Calibri, Helvetica, sans-serif;  
  background-color: pink;  
}  
button {   
       background-color: #4CAF50;   
       width: 100%;  
        color: orange;   
        padding: 15px;   
        margin: 10px 0px;   
        border: none;   
        cursor: pointer;   
         }   
 form {   
        border: 3px solid #f1f1f1;   
    }   
 input[type=text], input[type=password] {   
        width: 100%;   
        margin: 8px 0;  
        padding: 12px 20px;   
        display: inline-block;   
        border: 2px solid green;   
        box-sizing: border-box;   
    }  
 button:hover {   
        opacity: 0.7;   
    }   
  .cancelbtn {   
        width: auto;   
        padding: 10px 18px;  
        margin: 10px 5px;  
    }   
        
     
 .container {   
        padding: 25px;   
        background-color: lightblue;  
    }   
</style>   
</head>    
<body>    
    <center> <h1> Student Login Form </h1> </center>   
    <form>  
        <div class="container">   
            <label>Username : </label>   
            <input type="text" placeholder="Enter Username" name="username" required>  
            <label>Password : </label>   
            <input type="password" placeholder="Enter Password" name="password" required>  
            <button type="submit">Login</button>   
            <input type="checkbox" checked="checked"> Remember me   
            <button type="button" class="cancelbtn"> Cancel</button>   
            Forgot <a href="#"> password? </a>   
        </div>   
    </form>     
</body>     
</html>  


history:
 ansible all -m ping
   24  ansible all -a "ls"
   25  ansible all -a "pwd"
   26  ansible all -a "touch abc.txt"
   27  ansible all -a "ls"
   28  ansible all -a "mkdir dir1"
   29  ansible all -a "ls"
   30  ansible all -a "git --version"
   31  ansible all -a "yum install git -y"
   32  ansible all -a "git --version"
   33  ansible all -a "yum remove git -y"
   34  ansible all -a "yum remove git* -y"
   35  yum install httpd -y
   36  service httpd start
   37  service httpd status
   38  cd /var/www/html/
   39  vim index.html
   40  service httpd restart
   41  cd
   42  vim index.html
   43  ls
   44  ansible all -a "yum install httpd -y"
   45  ansible all -a "service httpd start"
   46  ansible all -a "service httpd status"
   47  ansible all -m copy -a "src=index.html dest=/var/www/html"
   48  ansible all -a "rm -f /var/www/html/index.html" 
   49  ansible all -a "ls /var/www/html/" 
   50  ansible all -m copy -a "src=index.html dest=/var/www/html"
   51  ansible all -a "yum remove httpd* -y"
   52  ansible all -a "service httpd status"
   53  ansible all -a "useradd ramesh"
   54  ansible all -a "cat /etc/passwd"
   55  ansible dev -a "yum install tree -y"
   56  ansible all -a "trre --version"
   57  ansible all -a "tree --version"
   58  vim /etc/ansible/hosts 
   59  ansible all -m yum -a "name=git state=present"
   60  ansible all -m yum -a "name=git* state=absent"
   61  ansible all -a "git --version"
   62  ansible all -m yum -a "name=httpd state=present"
   63  ansible all -m service -a "name=httpd state=started"
   64  ls
   65  ansible all -m copy -a "src=index.html dest=/var/www/html"
   66  ansible all -m service -a "name=httpd state=stopped"
   67  ansible all -m yum -a "name=httpd state=absent"
   68  ansible all -a "tree --version"
   69  ansible dev -a "yum remove tree -y"
   70  ansible all -a "tree --version"
   71  ansible all -m yum -a "name=tree state=latest"
   72  ansible all -m user -a "name=kranthi state=present"
   73  ansible all -a "cat /etc/passwd"
   74  ansible all -a "df -h"
   75  df -h
   76  vim /etc/ansible/hosts 
   77  ansible test -a "useradd ramu"
   78  ansible dev -m user -a "name=ramu state=present"
   79  ansible all -a "cat /etc/passwd"
   80  hostname master
   81  bash

day:3
playbook is used for managing more than one package ,by using more tan one module we can manage the packages
packages are nothing but git ,maven,docker, tree ...

example for single module play book
ansible playbooks are run written in YAML formate

YAML:yet markup another language

yaml formate is very easy and human readable

ansible all -a "yum install git -y"

ansible all -m yum -a "name=git state=present"

single module playbook

---
- name: install package
  hosts: all
  tasks:
  - name: install git
    yum: name=git state=present

multiple module playbook

---
- name: install package
  hosts: all
  tasks:
  - name: install git
    yum: name=git state=present
  - name: install tree
    yum: name=tree state=present
  - name: instal maven
    yum: name=maven state=present 

tages:to install or skipping the some of modules

---
- name: install package
  hosts: all
  tasks:
  - name: install git
    yum: name=git state=present
    tags: a
  - name: install tree
    yum: name=tree state=present
    tags: b
  - name: instal maven
    yum: name=maven state=present 
    tags: c
  - name: installing docker
    yum: name=docker state=present
    tags: d
  - name:install httpd
    action: yum name=httpd state=present
    tags: e

variables:
----------
two types of variables are there ,they are
1.static variables
2.dynamic variables

static varibles:these are present inside the playbook

---
- name: install package
  hosts: all
  vars:
    a: git
    b: docker
    c: tree
  tasks:
  - name: install git
    yum: name={{a}} state=present
  - name: install tree
    yum: name={{b}} state=present
  - name: instal maven
    yum: name={{c}} state=present
dynamic variables:
------------------
vim playbook1.yml
- hosts: all
  become: true
  tasks:
    - yum: name={{a}} state=present
    - yum: name={{b}} state=present

ansible-playbook playbook1.yml --extra-vars "a=git b=maven"

loops:
loops used to install multiple packages install at a time
vim loops.yml
- hosts: all
  tasks:
    - yum: name={{item}} state=present
      with_items:
        - git
        - docker
        - maven
        - java-1.8.0-openjdk
        - httpd


ansible-playbook loops.yml

uninstallation:
vim loops.yml
- hosts: all
  tasks:
    - yum: name={{item}} state=absent
      with_items:
        - git*
        - docker*
        - maven* 
        - java-1.8.0-openjdk*
        - httpd*

ansible-playbook loops.yml
notify and handlers:

vim handlers.yml

- hosts: all
  tasks:
    - name: install httpd
      yum: name=httpd state=present
      notify: start httpd
  handlers:
    - name: start httpd
      service: name=httpd state=started

ansible-playbook handlers.yml

roles:
we can split our playbook into parts to reuse the the tasks

mkdir -p roles/one/tasks

vim roles/one/tasks/main.yml
- name: install httpd
  yum: name=httpd state=present

mkdir -p roles/two/tasks

vim roles/two/tasks/main.yml
- name: install docker
  yum: name=docker state=present

vim master.yml

- hosts: all
  roles:
    - one
    - two

ansiblep-playbook master.yml

vim osflavour.yml 

- hosts: all
  tasks:
    - name: installing git on RedHat
      yum: name=git state=present
      when: ansible_os_family == "RedHat"
    - name: installing git on Debian
      apt: name=git state=present
      when: ansible_os_family == "Debian"   

ansible-playbook osflavour.yml
============================================================================================================

ansible-vault:

ansible-vault create playbook.yml:it will ask password
ansible-vault edit playbook.yml:we modify the content inside the file
ansible-vault view playbook.yml:it can show the content
ansible-vault rekey playbook.yml:we can change the password
ansible-vault encrypt playbook.yml:it can provide the security to existing file
ansible-vault decrypt playbook.yml:it can decript the file

     ansible-vault helps to maintain security while allowing you to store important credentials and configuration 
data within your Ansible playbooks and roles.
ansible-vault create play.yml
New Vault password:
Confirm New Vault password:

ansible-vault edit play.yml
ansible-vault rekey play.yml
Vault password:
New Vault password:
Confirm New Vault password:

ansible-vault encrypt playbook1.yml
New Vault password:
Confirm New Vault password:

ansible-vault decrypt playbook1.yml
passwd:

ansible-vault view play.yml
vault password:
==========================================================================================================================
webpage deploy using httpd:
---------------------------
vim index.html
<!DOCTYPE html>   
<html>   
<head>  
<meta name="viewport" content="width=device-width, initial-scale=1">  
<title> Login Page </title>  
<style>   
Body {  
  font-family: Calibri, Helvetica, sans-serif;  
  background-color: pink;  
}  
button {   
       background-color: #4CAF50;   
       width: 100%;  
        color: orange;   
        padding: 15px;   
        margin: 10px 0px;   
        border: none;   
        cursor: pointer;   
         }   
 form {   
        border: 3px solid #f1f1f1;   
    }   
 input[type=text], input[type=password] {   
        width: 100%;   
        margin: 8px 0;  
        padding: 12px 20px;   
        display: inline-block;   
        border: 2px solid green;   
        box-sizing: border-box;   
    }  
 button:hover {   
        opacity: 0.7;   
    }   
  .cancelbtn {   
        width: auto;   
        padding: 10px 18px;  
        margin: 10px 5px;  
    }   
        
     
 .container {   
        padding: 25px;   
        background-color: lightblue;  
    }   
</style>   
</head>    
<body>    
    <center> <h1> Student Login Form </h1> </center>   
    <form>  
        <div class="container">   
            <label>Username : </label>   
            <input type="text" placeholder="Enter Username" name="username" required>  
            <label>Password : </label>   
            <input type="password" placeholder="Enter Password" name="password" required>  
            <button type="submit">Login</button>   
            <input type="checkbox" checked="checked"> Remember me   
            <button type="button" class="cancelbtn"> Cancel</button>   
            Forgot <a href="#"> password? </a>   
        </div>   
    </form>     
</body>     
</html>  
======================================================================================================================
vim httpddeploy.yml

- hosts: all
  tasks:
    - name: installing httpd
      yum: name=httpd state=present
    - name: start httpd
      service: name=httpd state=started
    - name: copy the index.html to httpd path
      copy: src=index.html dest=/var/www/html
ansible-playbook httpddeploy.yml











































