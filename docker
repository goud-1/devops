docker: containerazation platform.we can utilize the memory in efficient way

container: pack the application along wirh its dependencies
virtualization: to efficint awy of using physical system

monolithic service: N no.of services utilize single server and single data base

 microservice: N no.of services working on N no.of servers.i.e each and every service has individul server along with database

hypervier :it can introduce the virtulization on physical system

installation of docker:

yum install docker -y
service docker start
service docker status
if you want to create a container it requires image.
Docker Containers:
Docker containers are the lightweight alternatives of the virtual machine. It allows developers to package up the
application with all its libraries and dependencies, and ship it as a single package. 

basic docker coomands:
======================
docker pull ubuntu:  dowload the docker image

crate container: 

#docker run -it --name cont1 ubuntu

this command can create the docker container at the same time go inside the docker container

ctrl p q--->comeout side from the container with out exited mode

ctrl + d--->comeout side from the container and contaner goes to exited mode

#docker run -itd --name cont2 ubuntu 
 this command is used create the container and the container is run in detached mode

#docker images    --->this command will show the list of containers
#docker ps        --->to see the list of running contaners
#docker ps -a     ---->to see the list of running and stopped containers
#docker attach contanerid --->login to the container
#docker exec -it contanerid /bin/bash--->login to the container
#docker run -it --name cont -p 80:80 ubuntu --->create the containerand assign the port numner
#docker stop cont_name
#docker start cont_name
#docker kill cont_name
#docker pause con_name
#docker container ls
#docker inspect cont_name-->this will show the detailed discription of container

docker is a os level vituvalization

docker pull ubuntu

docker run -itd --name cont ubuntu

apt update -y
apt install apache2 -y
apt install mysql-server -y
apt install default-jdk default-jre -y
touch file{1..5}

dockerfile components:
 dockerfile has list of commands to create the docker image
COMPONENTS:

FROM		: used to base image
RUN		    : used to run linux commands (image creation)
CMD		    : used to run linux commands (container creation)
ENTRYPOINT	: high priority than cmd
COPY		: to copy local files to conatiner
ADD		    : to copy internet files to conatiner
WORKDIR		: to open req directory
LABEL		: to add labels for docker file
ENV		    : to set env variables (inside container)
ARGS		: to pass env variables (outside containers)
EXPOSE		: to give port number


build the docker file------>docker image--->run the docker image---->docker contaner

vim Dockerfile

FROM amazonlinux
RUN yum update -y
RUN yum install httpd -y
RUN touch abc.txt
RUN mkdir ram
WORKDIR ram

docker build -t image1 .
docker run -it --name cont1 image1
ctrl p q
docker ps -a

vim Dockerfile
FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
ADD http://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp

docker build -t image2 .
docker run -itd --name cont2 image2

ex:3
FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY index.html /var/www/html
ADD http://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp
WORKDIR /tmp
LABEL auther ram
CMD apt install maven -y

ex:4
FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
RUN apt install mysql-server -y
RUN apt install default-jre default-jdk -y
CMD apt install maven -y

ex:5
FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
ADD http://dlcdn.apache.org/tomcat/tomcat-9/v9.0.80/bin/apache-tomcat-9.0.80.tar.gz /tmp
WORKDIR /tmp
VOLUME /myvol
LABEL auther ram
COPY index.html /var/www/html
ENV client swiggy
ENV container appcontainer
EXPOSE 8080

ex:6

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY * /var/www/html/
CMD ["/usr/sbin/apachectl","-D","FOREGROUND"]

git clone https://github.com/mohanlucky2/bookmyshow.git

mv bookmyshow/* .

history:
 mkdir docker1
 cd docker1
 ls
 vim Dockerfile
 docker build -t image1 .
 docker images
 docker run -it --name image1
 docker run -it --name cont3 image1
 docker ps
 vim Dockerfile
 docker run -it --name image1
 docker build -t image1 .
 vim Dockerfile
 docker build -t image1 .
 vim Dockerfiles
 cd ..
 ls
 cp index.html docker1/
 cd docker1
  ls
 docker build -t image1 .
 docker images
 cat Dockerfile
 docker run -it --name cont5 image1
  vim Dockerfile
 docker rm -f $(docker ps -aq)
 docker rmi -f $(docker images -aq)
 docker images
 docker ps -a
 docker build -t apache .
 docker images
 docker run -itd --name loginform -p 80:80 apache
 docker ps

ex:6

FROM ubuntu
RUN apt update -y
RUN apt install apache2 -y
COPY * /var/www/html/
CMD ["/usr/sbin/apachectl","-D","FOREGROUND"]

git clone https://github.com/mohanlucky2/bookmyshow.git

mv bookmyshow/* .

docker volumes:
--------------
docker volumes are used store data inside the container

docker volume is a simple directory inside the container

containers uses host resources like cpu,ram and rom

single volume can be shared to multiple containers 

reation of the container is different ways
method-1:

FROM ubuntu
VOLUME /myvol

docker build -t image1 .

docker run -it --name cont1 image1

cd myvol/
touch abc.txt

cat>abc.txt
ctrl p q

docker run -it --name cont2 --volumes-from cont1 --privileged=true ubuntu

method-2:

docker run -it --name cont3 -v myvol1 ubuntu

cd myvol1/

touch file{1..5}

docker run -it --name cont4 --volumes-from cont3 --privileged=true ubuntu

method-3:volume mounting:

docker volume ls ---->list of volumes

docker volume create volume-1 --->to create volume
docker volume inspectvolume name-->to get the docker volume information

cd /var/lib/docker/volumes/myvol1/_data

touch file{1..5}
docker run -it --name cont5 --mount source=volume-1,destination=/volume-1 ubuntu
docker volume rm volumename
docker volume prune volumename: to delete unused containers

docker system commands:
thes are used to konow the complete information of docker container

docker system df -v
docker inspect cont3 grep volume -image
docker system prune:to remove unused objects of docker

docker memory management:

containes uses host resources .by default we don't have any limits for containers

we need to set it

docker run -itd --name cont6 --memory="200mb" --cpus="0.2" ubuntu

docker inspect cont6

docker stats cont6







1  yum update -y
    2  yum install docker git -y
    3  git clone https://github.com/mohanlucky2/bookmyshow.git
    4  ls
    5  cd bookmyshow/
    6  ls
    7  vim Dockerfile
    8  ls
    9  docker build -t bookmyshow .
   10  service docker start
   11  service docker sttus
   12  service docker status
   13  docker build -t bookmyshow .
   14  docker images
   15  docker run -itd --name cont1 -p 81:80 bookmyshow
   16  docker ps
   17  cd ..
   18  mkdir docker
   19  cd docker/
   20  vim Dockerfile
   21  docker build -t volumeimage .
   22  docker images
   23  docker run -it --name cont2 volumeimage
   24  docker ps
   25  docker run -it --name cont3 --volumes-from cont2 --privileged=true volumeimage
   26  docker images
   27  docker run -it --name cont4 -v myvolume ubuntu
   28  docker run -it --name cont5 --volumes-from cont4 --privileged=true volumeimage
   29  docker volume ls
   30  docker ps -a
   31  docker volume create myvol
   32  docker volume ls
   33  docker run -it --name cont6 --mount source=myvol destination=/myvol ubuntu
   34  docker run -it --name cont6 --mount source=myvol,destination=/myvol ubuntu
   35  docker volume ls
   36  docker ps -a
   37  docker system df -v
   38  docker inspect cont1
   39  docker inspect volume1
   40  docker inspect myvol
   41  docker volume ls
   42  docker run -itd --name cont7 --memory="200mb" --cpus= "0.2" ubuntu
   43  docker run -itd --name cont7 --memory="200mb" --cpus="0.2" ubuntu
   44  docker stats cont7
   45  docker images
   46  docker ps
   47  docker volume ls
   48  docker rm -f $(docker ps -aq)
   49  docker rmi -f $(docker images -aq)
   50  docker images
   51  docker ps -a
   52  docker volume ls
   53  docker volume rm myvol
   54  docker volume prune
   55  docker volume ls

   
